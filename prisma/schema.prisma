generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// command to run a docker for connecting postgres
// docker run -d -e POSTGRES_DB=mydb -e POSTGRES_PASSWORD=testpass123 -e POSTGRES_USER=postgres -p "6500:5432" postgres

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile      Profile?
  quizSessions QuizSession[]

  isTwoFactorEnabled Boolean? @default(false)

  // one to one relation between user and two factor confirmation
  TwoFactorConfirmation TwoFactorConfirmation?
  Payment               Payment[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  hasLifetimeAccess Boolean @default(false)
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount                Float
  currency              String
  paymentType           PaymentType
  stripePaymentIntentId String        @unique
  stripeInvoiceId       String? // Optional for one-time payments
  stripeSubscriptionId  String? // Optional for subscriptions
  status                PaymentStatus
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

enum PaymentType {
  ONE_TIME
  SUBSCRIPTION
}

enum PaymentStatus {
  SUCCEEDED
  FAILED
  PENDING
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// exam type means the vendor that the exams belong to
model Vendor {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  exams     Exam[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExamLevel {
  ASSOCIATE
  PROFESSIONAL
  EXPERT
}

// each individual exam, it can belong to a vendor
model Exam {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  vendorId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  timeAllowed     Int
  price           Int           @default(0)
  stripeProductId String?
  attempts        Int
  vendor          Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  examLevel       ExamLevel
  questions       Question[]
  QuizSession     QuizSession[]

  // questions to show to the user
  questionsToShow Int     @default(10) // Default value, can be adjusted
  description     String? // Description of the exam
}

enum ExamModeValues {
  PRACTICE
  MOCK
}

model QuizSession {
  id          String         @id @default(cuid())
  userId      String
  examId      String
  examMode    ExamModeValues @default(PRACTICE)
  startTime   DateTime
  endTime     DateTime?
  isCompleted Boolean        @default(false)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam         Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)
  userAttempts UserAttempt[]

  // New fields to track quiz result details
  correctAnswers   Int      @default(0) // Tracks the number of correct answers
  incorrectAnswers Int      @default(0) // Tracks the number of incorrect answers
  skippedAnswers   Int      @default(0) // Tracks the number of skipped answers
  passFailStatus   Boolean? // True for pass, False for fail, nullable until quiz is evaluated
  percentageScored Float? // Stores the percentage score, nullable until quiz is completed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAttempt {
  id            String      @id @default(cuid())
  quizSessionId String
  questionId    String
  userAnswer    String
  isCorrect     Boolean?
  skipped       Boolean?
  quizSession   QuizSession @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([quizSessionId, questionId])
}

model QuestionOption {
  id          String   @id @default(cuid())
  option      String // Stores the option text (e.g., "Option 1", "Option 2")
  explanation String // Explanation for the option
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CorrectAnswer {
  id         String   @id @default(cuid())
  answer     String // The answer could be the option ID or the option text (whichever you prefer)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Question {
  id                 String       @id @default(cuid())
  question           String
  type               QuestionType @default(MCQ)
  overallExplanation String
  examId             String
  exam               Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)

  options        QuestionOption[]
  correctAnswers CorrectAnswer[]

  UserAttempt UserAttempt[]
  createdAt   DateTime      @default(now())
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  MULTI_SELECT
  SHORT_ANSWER
}
